% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sampling.R
\name{sample_truncnorm_white}
\alias{sample_truncnorm_white}
\title{Sample Whiten Truncated Normal}
\usage{
sample_truncnorm_white(
  A,
  b,
  initial,
  bias_direction,
  how_often = 1000,
  sigma = 1,
  burnin = 500,
  ndraw = 1000,
  use_constraint_directions = TRUE,
  use_random_directions = FALSE,
  ignore_bound_violations = TRUE
)
}
\arguments{
\item{A}{Linear part of affine constraints}

\item{b}{Offset part of affine constraints}

\item{initial}{Initial point for Gibbs draws, assumed to satisfy the constraints}

\item{bias_direction}{Represents the projection that is of most interest}

\item{how_often}{Indicates how often should the sampler make a move along "direction_of_interest"
If negative, defaults to ndraw+burnin (so it will never be used)}

\item{sigma}{Variance parameter}

\item{burnin}{Indicates how many iterations until we start recording samples}

\item{ndraw}{Inidicates how many samples should we return}

\item{use_constraint_directions}{Binary indicator of whether using the directions
formed by the constraints as in the Gibbs scheme}

\item{use_random_directions}{Binary indicator of whether using additional
random directions in the Gibbs scheme}

\item{ignore_bound_violations}{Binary indicator of whether ignoring bound violations}
}
\value{
Truncated normal samples.
}
\description{
Sample from a truncated normal with covariance equal to sigma^2 I.
Constraint is $Ax <= b$ where `A` has shape `(q,n)` with `q` the number
of constraints and `n` the number of random variables.
}
\examples{
# Fit the group lasso optimization model
Z = matrix(rnorm(10*3), nrow = 10, ncol = 3) +
    matrix(replicate(3, matrix(0, nrow = 10, ncol = 1)),
    nrow = 10)
errorTerm = MASS::mvrnorm(n=10, mu=rep(0,2),
            Sigma=rbind(c(1, 0.8),c(0.8, 1)))
D = Z \%*\% rep(1, 3) + errorTerm[1:10, 2]
Y = D * 1 + errorTerm[1:10, 1]
gl <- group_lasso_iv(Y, D, Z)
model <- fit_tsls(gl)

# Whiten the box constraint
white_con = whiten(model$sampler$affine_con)
white_Y = forward_map(model$sampler$initial_point,
                      white_con)
Y = as.matrix(model$sampler$initial_point)
direction_of_interest = rnorm(length(Y))
white_direction_of_interest =
forward_map(model$sampler$affine_con$covariance \%*\%
            direction_of_interest,
            white_con)

# Generate whiten samples from truncated normal distribution
sample_truncnorm_white(white_con$linear_part,
                       white_con$offset,
                       white_Y,
                       white_direction_of_interest,
                       how_often=2000,
                       ndraw=1000,
                       burnin=1000,
                       sigma=1,
                       use_constraint_directions=TRUE,
                       use_random_directions=TRUE)
}
\references{
Bi, Nan & Kang, Hyunseung & Taylor, Jonathan. (2019). Inference After Selecting
Plausibly Valid Instruments with Application to Mendelian Randomization.

Bi, Nan & Kang, Hyunseung & Taylor, Jonathan. (2020). Inferring Treatment
Effects After Testing Instrument Strength in Linear Models.
}
\seealso{
\link[stats]{pnorm} for the distribution function of normal distribution.

\link[stats]{qnorm} for the quantile function of normal distribution.

\link[stats]{rnorm} for generating random deviates of normal distribution.

\link[stats]{runif} for generating random deviates of uniform distribution.

\link{sample} for sampling process.
}
