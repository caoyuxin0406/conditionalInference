% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/intervals.R
\name{weights_iv}
\alias{weights_iv}
\title{Weights}
\usage{
weights_iv(opt_intervals, sample_stat, candidate, nuisance, translate_dirs)
}
\arguments{
\item{opt_intervals}{Optimization intervals}

\item{sample_stat}{Normal sample}

\item{candidate}{Candidate value}

\item{nuisance}{Nuisance sufficient stats for each view}

\item{translate_dirs}{Points will be moved like sample * score_cov}
}
\value{
Weights of the sequence of pivot values
}
\description{
Calculate the weights of candidate pivot values for TSLS test statisitc.
}
\examples{
# Fit the group lasso optimization model
Z = matrix(rnorm(10*3), nrow = 10, ncol = 3) +
    matrix(replicate(3, matrix(0, nrow = 10, ncol = 1)),
    nrow = 10)
errorTerm = MASS::mvrnorm(n=10, mu=rep(0,2),
            Sigma=rbind(c(1, 0.8),c(0.8, 1)))
D = Z \%*\% rep(1, 3) + errorTerm[1:10, 2]
Y = D * 1 + errorTerm[1:10, 1]
gl <- group_lasso_iv(Y, D, Z)
model <- fit_tsls(gl)

# Estimate covariance and obtain summary statistics
cov = estimate_covariance(Y, D, Z)
s <- summary_tsls(gl, model$sampler, Sigma_11=cov[1,1],
                  Sigma_12=cov[1,2], ndraw=20, burnin=20)

# Construct the optimization intervals before computing confidence intervals
# for TSLS test statistic
ndraw = nrow(s$opt_sample)
opt_sampling_info = list(sets::tuple(model$sampler,
                                     s$opt_sample,
                                     s$cov_target,
                                     s$cov_target_score))
intervals <- optimization_intervals(opt_sampling_info,
                                    s$observed_target,
                                    ndraw)

# Setting up parameters for weights_iv method
keep = matrix(0, nrow(s$observed_target), ncol(s$observed_target))
keep[1] = 1
observed_stat = intervals$observed \%*\% keep
sample_stat = intervals$normal_sample \%*\% keep
cur_nuisance = matrix(c(0.6197473, 1.3126907,  0.8292342))
cur_translate_dirs = matrix(c(-3.048598, -6.457254, -4.079085))
nuisance = list(cur_nuisance)
translate_dirs = list(cur_translate_dirs)

# Compute weights for candidate pivot values
weights <- weights_iv(opt_intervals=intervals,
                      sample_stat=sample_stat,
                      candidate=0,
                      nuisance=nuisance,
                      translate_dirs=translate_dirs)

# Using the computed weights to calculate the pivot value
comp <- apply(sample_stat + 0, c(1,2), function(x) x <= observed_stat)
pivot <- mean(comp * weights) / mean(weights)
pivot
}
\references{
Bi, Nan & Kang, Hyunseung & Taylor, Jonathan. (2019). Inference After Selecting
Plausibly Valid Instruments with Application to Mendelian Randomization.

Bi, Nan & Kang, Hyunseung & Taylor, Jonathan. (2020). Inferring Treatment
Effects After Testing Instrument Strength in Linear Models.
}
\seealso{
\link{weights_iv_ar} for calculating the weights of candidate pivot values
for AR test statistic. This process is similar to that for TSLS statistic.

\link{log_density_ray} that computes the log density of normal sample.
}
