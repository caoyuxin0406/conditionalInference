% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/intervals.R
\name{pivot_iv}
\alias{pivot_iv}
\title{Pivot}
\usage{
pivot_iv(opt_intervals, linear_func, candidate, alternative = "twosided")
}
\arguments{
\item{opt_intervals}{Optimization intervals}

\item{linear_func}{Linear function}

\item{candidate}{Candidate value}

\item{alternative}{A list of ['greater', 'less', 'twosided'],
which indicates what alternative to use}
}
\value{
Pivot quantities for TSLS test statistic.
}
\description{
Calculate the pivot quantities of the optimization intervals.
}
\examples{
# Fit the group lasso optimization model
Z = matrix(rnorm(10*3), nrow = 10, ncol = 3) +
    matrix(replicate(3, matrix(0, nrow = 10, ncol = 1)),
    nrow = 10)
errorTerm = MASS::mvrnorm(n=10, mu=rep(0,2),
            Sigma=rbind(c(1, 0.8),c(0.8, 1)))
D = Z \%*\% rep(1, 3) + errorTerm[1:10, 2]
Y = D * 1 + errorTerm[1:10, 1]
gl <- group_lasso_iv(Y, D, Z)
model <- fit_tsls(gl)

# Estimate covariance and obtain summary statistics
cov = estimate_covariance(Y, D, Z)
s <- summary_tsls(gl, model$sampler,
                  Sigma_11=cov[1,1], Sigma_12=cov[1,2])

# Construct the optimization intervals before computing confidence intervals
# for TSLS test statistic
ndraw = nrow(s$opt_sample)
opt_sampling_info = list(sets::tuple(model$sampler,
                                     s$opt_sample,
                                     s$cov_target,
                                     s$cov_target_score))
intervals <- optimization_intervals(opt_sampling_info,
                                    s$observed_target,
                                    ndraw)

# Compute pivot value
keep = matrix(0, nrow(s$observed_target), ncol(s$observed_target))
keep[1] = 1
pivot_iv(opt_intervals=intervals,
         linear_func=keep,
         candidate=0,
         alternative='twosided')

# Compute the pivot value for a sequence of candidate value
level = 0.95
sample_stat = intervals$normal_sample \%*\% keep
observed_stat = intervals$observed \%*\% keep
grid_min = -20 * sd(sample_stat)
grid_max = 20 * sd(sample_stat)
for (gamma in seq(grid_min, grid_max, length.out=40)) {
 candidate = gamma + observed_stat[1,1]
 lower <- pivot_iv(intervals, keep, candidate, 'less') - (1 - level) / 2
 upper <- pivot_iv(intervals, keep, candidate, 'less') - (1 + level) / 2
 print(c(lower, upper))
}
}
\references{
Bi, Nan & Kang, Hyunseung & Taylor, Jonathan. (2019). Inference After Selecting
Plausibly Valid Instruments with Application to Mendelian Randomization.

Bi, Nan & Kang, Hyunseung & Taylor, Jonathan. (2020). Inferring Treatment
Effects After Testing Instrument Strength in Linear Models.
}
\seealso{
\link{pivot_iv_ar} for calculating the pivot quantities/p-values of the
optimization intervals for AR test statistic. The process is similar to
that of TSLS test statistic.

\link{weights_iv} that computes the weights of candidate pivot values
for TSLS test statistic.
}
