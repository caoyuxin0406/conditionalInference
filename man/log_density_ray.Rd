% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/intervals.R
\name{log_density_ray}
\alias{log_density_ray}
\title{Log Density Ray}
\usage{
log_density_ray(
  candidate,
  direction,
  nuisance,
  gaussian_sample,
  opt_sampler,
  opt_sample
)
}
\arguments{
\item{candidate}{Candidate value}

\item{direction}{Points will be moved like sample * score_cov}

\item{nuisance}{Nuisance sufficient stats for each view}

\item{gaussian_sample}{Gaussian/normal samples}

\item{opt_sampler}{Optimization sampler (e.g. affine gaussian sampler)}

\item{opt_sample}{Samples generated from the optimization problem}
}
\value{
A log_density_ray object, which is a list of:
\item{linear_term}{Linear term}
\item{quadratic_term}{Quadratic term}
\item{constant_term}{Constant term}
\item{lognum}{return value of log_density_ray}
}
\description{
Calculate the log density of normal sample.
}
\examples{
# Fit the group lasso optimization model
Z = matrix(rnorm(10*3), nrow = 10, ncol = 3) +
    matrix(replicate(3, matrix(0, nrow = 10, ncol = 1)),
    nrow = 10)
errorTerm = MASS::mvrnorm(n=10, mu=rep(0,2),
            Sigma=rbind(c(1, 0.8),c(0.8, 1)))
D = Z \%*\% rep(1, 3) + errorTerm[1:10, 2]
Y = D * 1 + errorTerm[1:10, 1]
gl <- group_lasso_iv(Y, D, Z)
model <- fit_tsls(gl)

# Estimate covariance and obtain summary statistics
cov = estimate_covariance(Y, D, Z)
s <- summary_tsls(gl, model$sampler, Sigma_11=cov[1,1],
                  Sigma_12=cov[1,2], ndraw=20, burnin=20)

# Construct the optimization intervals before computing confidence intervals
# for TSLS test statistic
opt_sampling_info = list(sets::tuple(model$sampler,
                                     s$opt_sample,
                                     s$cov_target,
                                     s$cov_target_score))
intervals <- optimization_intervals(opt_sampling_info,
                                    s$observed_target,
                                    nrow(s$opt_sample))

# Setting up parameters for weights_iv method
keep = matrix(0, nrow(s$observed_target), ncol(s$observed_target))
keep[1] = 1
sample_stat = intervals$normal_sample \%*\% keep
cur_nuisance = matrix(c(0.6197473, 1.3126907,  0.8292342))
cur_translate_dirs = matrix(c(-3.048598, -6.457254, -4.079085))
nuisance = list(cur_nuisance)
translate_dirs = list(cur_translate_dirs)

# Calculate the log density of normal sample
log_density_ray(candidate=0,
                direction=translate_dirs[[1]],
                nuisance=nuisance[[1]],
                gaussian_sample=sample_stat,
                opt_sampler=model$sampler,
                opt_sample=s$opt_sample)
}
\references{
Bi, Nan & Kang, Hyunseung & Taylor, Jonathan. (2019). Inference After Selecting
Plausibly Valid Instruments with Application to Mendelian Randomization.

Bi, Nan & Kang, Hyunseung & Taylor, Jonathan. (2020). Inferring Treatment
Effects After Testing Instrument Strength in Linear Models.
}
\seealso{
\link{log_density} to calculate the log density of given equation,
including the Jacobian term.
}
